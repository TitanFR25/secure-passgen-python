# Import des modules n√©cessaires pour le programme
from generator import generatePassword
from chiffrement import cryptPass 
from chiffrement import cryptPassword
from chiffrement import filePath
from save import savePassword
from mdp import recupererLeMotDePasse
from dechiffrement import fichierPassDecrypt
from mdp import remplacerPass
import time

chemin = filePath("secret.key")

# Demander √† l'utilisateur s'il poss√®de d√©j√† le fichier Mes Donn√©es.txt
questionPossederFich = input("Poss√©dez-vous d√©j√† le fichier qui sauvegarde vos donn√©es ? (oui/non) ").strip().lower()

# Si la r√©ponse est oui, demander s'il a chiffr√© son mot de passe
if questionPossederFich == "oui":
    questionCryptPass = input("Avez-vous chiffr√© votre mot de passe dans ce fichier ? (oui/non) ").strip().lower()

    # Si la r√©ponse est oui, demander s'il veut d√©chiffrer son mot de passe
    if questionCryptPass == "oui":
        questionDecryptPass = input("Souhaitez-vous d√©chiffrer votre mot de passe ? (oui/non) ").strip().lower()

        if questionDecryptPass == "oui":
            if __name__ == "__main__":
                # R√©cup√©rer le contenu du fichier .txt
                fichierPassCrypt = recupererLeMotDePasse()

                #Si on trouve pas de mot de passe envoyer une erreur sinon affichier le mot de passe
                if fichierPassCrypt is None:
                    print("‚ùå Aucun mot de passe trouv√© dans le fichier.")
                    exit()
                else:
                    MotDePasseDecrypt = fichierPassDecrypt(fichierPassCrypt)
                    print("üîì Voici votre mot de passe :", MotDePasseDecrypt)
        else:
            exit()
    else:
        questionCryptNow = input("Voulez vous le chiffrer ?").strip().lower()

        if questionCryptNow == "oui":

            #r√©cuperer le mot de passe
            fichierPass = recupererLeMotDePasse()

            print("üîÑ Chiffrement en cours...")
            time.sleep(0.5)

            #Chiffrer le mot de passe 
            PassCryptNow = cryptPassword(fichierPass)
            
            #Remplacer le mot de passe
            remplacerPass(PassCryptNow)
            print("‚úÖ Chiffrement termin√©")
        else:
            exit()
else:
    # Point d'entr√©e du script
    if __name__ == "__main__":
        # G√©n√©ration du mot de passe
        mot_de_passe = generatePassword()

        # Demander √† l'utilisateur s'il souhaite chiffrer le mot de passe et le chiffrer si besoin
        mot_de_passe_resultat, est_chiffre = cryptPass(mot_de_passe)

        # Sauvegarde du mot de passe (chiffr√© ou non) en fonction de la r√©ponse de l'utilisateur
        savePassword(mot_de_passe, mot_de_passe_resultat, est_chiffre)